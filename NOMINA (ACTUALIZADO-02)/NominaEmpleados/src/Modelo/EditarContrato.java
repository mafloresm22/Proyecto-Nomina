/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package     Modelo;

import java.util.List;
import Modelo.Puesto;
import Modelo.ComboBoxItem;

import Modelo.PuestoDAO;
import Modelo.TrabajadorContrato;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class EditarContrato extends javax.swing.JFrame {
    private javax.swing.JLabel lblRemuneracionMinima;
    
    private int minimumRemuneration;
 PuestoDAO puestoDAO = new PuestoDAO();
 ContratoDAO contratoDAO=new ContratoDAO();
 private boolean isValidDate(String dateStr) {
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        sdf.parse(dateStr);
        return true;
    } catch (ParseException e) {
        return false;
    }
}
public int id;
    /**
     * Creates new form EditarContrato
     */

    public EditarContrato(int idTrabajador) {
        id = idTrabajador;
        initComponents();

        // Crear y configurar el label para la remuneración mínima
        lblRemuneracionMinima = new javax.swing.JLabel();
        lblRemuneracionMinima.setForeground(new java.awt.Color(255, 0, 0)); // Color rojo
        lblRemuneracionMinima.setFont(new java.awt.Font("Segoe UI", 1, 12)); // Negrita
        // Agregar el label al panel (ajusta las coordenadas según tu diseño)
        jPanel1.add(lblRemuneracionMinima, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 200, 20));

        listarPuestos(idTrabajador);
        cargarDatosTrabajador(idTrabajador);
    }
    void listarPuestos(int idTrabajador) {
        List<Puesto> lista = puestoDAO.listarPuestos();
        cb_puestos.removeAllItems();  // Limpiar el ComboBox antes de agregar los elementos
        for (Puesto t : lista) {
            cb_puestos.addItem(new ComboBoxItem(t.getIdPuesto(), t.getDescripPuesto())); // Añade ComboBoxItem
        }
        cb_puestos.setSelectedIndex(contratoDAO.obtenerDatosTrabajadorContrato(idTrabajador).getIdpuesto()-1);
        System.out.println(contratoDAO.obtenerDatosTrabajadorContrato(idTrabajador).getIdpuesto());
         cb_jubilacion.addItem(contratoDAO.obtenerDatosTrabajadorContrato(idTrabajador).getJubilacion());

    }

    void cargarDatosTrabajador(int idTrabajador) {
        TrabajadorContrato trabajadorContrato = contratoDAO.obtenerDatosTrabajadorContrato(idTrabajador);

        if (trabajadorContrato != null) {
            // Rellenar los campos con los datos del trabajador y su contrato
            txt_expiracion.setText(trabajadorContrato.getExpContrato());
            cb_duracion.setSelectedItem(trabajadorContrato.getDuracionContrato());
            txt_hijos.setText(String.valueOf(trabajadorContrato.getHijos()));
            txt_remuneracion.setText(String.valueOf(trabajadorContrato.getRemuContrato()));

            // Cargar correctamente el fondo de jubilación
            cb_jubilacion.removeAllItems(); // Limpiamos primero el combobox
            cb_jubilacion.addItem("AFP");
            cb_jubilacion.addItem("ONP");
            cb_jubilacion.setSelectedItem(trabajadorContrato.getJubilacion()); // Seleccionamos el valor guardado
        } else {
            // Limpiar los campos si no hay datos
            txt_remuneracion.setText("");
            txt_expiracion.setText("");
            cb_duracion.setSelectedItem(null);
            txt_hijos.setText("");
            cb_jubilacion.setSelectedIndex(0);
        }
    }






    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnguardar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cb_puestos = new javax.swing.JComboBox<>();
        txt_remuneracion = new javax.swing.JTextField();
        cb_jubilacion = new javax.swing.JComboBox<>();
        btnFinalizar = new javax.swing.JButton();
        cb_duracion = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txt_expiracion = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btn_regresar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txt_hijos = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 82, -1, -1));
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 361, -1, -1));

        jLabel11.setText("Expiración");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, -1, -1));

        btnguardar.setText("Guardar");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnguardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 480, -1, -1));

        jLabel4.setText("Puesto");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        cb_puestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_puestosActionPerformed(evt);
            }
        });
        cb_puestos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cb_puestosKeyReleased(evt);
            }
        });
        getContentPane().add(cb_puestos, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 120, -1));

        txt_remuneracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_remuneracionActionPerformed(evt);
            }
        });
        getContentPane().add(txt_remuneracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 130, -1));

        cb_jubilacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AFP", "ONP" }));
        cb_jubilacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_jubilacionActionPerformed(evt);
            }
        });
        getContentPane().add(cb_jubilacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 120, -1));

        btnFinalizar.setText("Finalizar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnFinalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 480, -1, -1));

        cb_duracion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Indeterminado", "Temporada", "Proyecto" }));
        cb_duracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_duracionActionPerformed(evt);
            }
        });
        getContentPane().add(cb_duracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 120, -1));

        jLabel5.setText("Remuneración");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, -1, -1));

        txt_expiracion.setText("2000-01-01");
        txt_expiracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_expiracionActionPerformed(evt);
            }
        });
        getContentPane().add(txt_expiracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, 130, -1));

        jLabel12.setText("Fondo de jubilación");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, 20));

        jLabel7.setText("Beneficios:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, -1, -1));

        jLabel10.setText("Duracion");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Detalles  del Contrato");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        btn_regresar.setText("Regresar");
        btn_regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_regresarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 480, -1, -1));

        jLabel8.setText("Número de hijos");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, -1, 20));

        txt_hijos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_hijosActionPerformed(evt);
            }
        });
        jPanel1.add(txt_hijos, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 410, 110, -1));

        jLabel13.setText("Escolaridad");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 370, -1, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 440, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cb_puestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_puestosActionPerformed
     ComboBoxItem selectedItem = (ComboBoxItem) cb_puestos.getSelectedItem();
    if (selectedItem != null) {
        int idPuesto = selectedItem.getId();
        int remuneracion = puestoDAO.obtenerRemuneracion(idPuesto);
        minimumRemuneration = remuneracion;
        
        // Validar la remuneración actual
        String remuneracionActual = txt_remuneracion.getText().trim();
        if (!remuneracionActual.isEmpty()) {
            try {
                int remuActual = Integer.parseInt(remuneracionActual);
                if (remuActual < remuneracion) {
                    lblRemuneracionMinima.setText("* Remuneración mínima: S/." + remuneracion);
                    txt_remuneracion.setBackground(new java.awt.Color(255, 220, 220)); // Fondo rojo claro
                } else {
                    lblRemuneracionMinima.setText("");
                    txt_remuneracion.setBackground(java.awt.Color.WHITE);
                }
            } catch (NumberFormatException e) {
                // Si no es un número válido
                lblRemuneracionMinima.setText("* Ingrese un monto válido");
                txt_remuneracion.setBackground(new java.awt.Color(255, 220, 220));
            }
        } else {
            txt_remuneracion.setText(String.valueOf(remuneracion));
            lblRemuneracionMinima.setText("");
            txt_remuneracion.setBackground(java.awt.Color.WHITE);
        }
    }
    }//GEN-LAST:event_cb_puestosActionPerformed

    private void btn_regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_regresarActionPerformed
      HU02 objetoFormulario = new HU02();
        objetoFormulario.setVisible(true);
        dispose();
    }//GEN-LAST:event_btn_regresarActionPerformed

    private void cb_duracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_duracionActionPerformed
        if (cb_duracion.getSelectedIndex() == 0) {
            LocalDate fechaActual = LocalDate.now();
            LocalDate fechaExpiracion = fechaActual.plusDays(1);
            txt_expiracion.setText(fechaExpiracion.toString());
            txt_expiracion.setEnabled(false);
        } else {
            if (txt_expiracion.getText().isBlank()) {
                txt_expiracion.setText("aaaa-mm-dd");
            }
            txt_expiracion.setEnabled(true);
        }
    }//GEN-LAST:event_cb_duracionActionPerformed

    private void txt_expiracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_expiracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_expiracionActionPerformed

    private void txt_remuneracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_remuneracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_remuneracionActionPerformed

    private void cb_jubilacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_jubilacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_jubilacionActionPerformed

    private void txt_hijosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_hijosActionPerformed
        // TODO add your handling code here:
        if(txt_hijos.getText().isBlank()){
            txt_hijos.setText("0");
        }
    }//GEN-LAST:event_txt_hijosActionPerformed

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
    try {
        // Validaciones de campos obligatorios
        if (cb_puestos.getSelectedItem() == null || 
            cb_duracion.getSelectedItem() == null ||
            txt_expiracion.getText().trim().isEmpty() ||
            txt_remuneracion.getText().trim().isEmpty() ||
            cb_jubilacion.getSelectedItem() == null) {
            
            JOptionPane.showMessageDialog(this, 
                "Todos los campos son obligatorios", 
                "Error de validación", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtener y validar valores
        ComboBoxItem selectedPuesto = (ComboBoxItem) cb_puestos.getSelectedItem();
        int idPuesto = selectedPuesto.getId();
        String duracionContrato = (String) cb_duracion.getSelectedItem();

        // Validar fecha de expiración
        if (!isValidDate(txt_expiracion.getText())) {
            JOptionPane.showMessageDialog(this, 
                "El formato de fecha debe ser YYYY-MM-DD", 
                "Error de formato", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.util.Date expContrato = new SimpleDateFormat("yyyy-MM-dd").parse(txt_expiracion.getText());
        
        // Verificar que la fecha de expiración sea mayor a la fecha actual
        java.util.Date fechaActual = new java.util.Date();
        if (expContrato.compareTo(fechaActual) <= 0) {
            JOptionPane.showMessageDialog(this, 
                "La fecha de expiración debe ser mayor a la fecha actual", 
                "Error de validación", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validar remuneración
        if (!txt_remuneracion.getText().matches("\\d+")) {
            JOptionPane.showMessageDialog(this, 
                "La remuneración debe ser un número válido", 
                "Error de formato", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        int remuContrato = Integer.parseInt(txt_remuneracion.getText());

        // Validar remuneración mínima según el puesto
        int remuneracionMinima = contratoDAO.obtenerRemuneracionMinima(idPuesto);
        if (remuContrato < remuneracionMinima) {
            JOptionPane.showMessageDialog(this, 
                "La remuneración no puede ser menor al mínimo de " + remuneracionMinima + " para el puesto seleccionado", 
                "Error de validación", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String jubiContrato = (String) cb_jubilacion.getSelectedItem();
        
        // Validar número de hijos
        int numHijosContrato;
        if (txt_hijos.getText().trim().isEmpty()) {
            numHijosContrato = 0;
            txt_hijos.setText("0");
        } else if (!txt_hijos.getText().matches("\\d+")) {
            JOptionPane.showMessageDialog(this, 
                "El número de hijos debe ser un número válido", 
                "Error de formato", 
                JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            numHijosContrato = Integer.parseInt(txt_hijos.getText());
        }

        int idTrabajador = id;

        // Llamar al método editarContratoPorTrabajador del DAO
        boolean actualizado = contratoDAO.editarContratoPorTrabajador(
            idTrabajador,
            idPuesto,
            duracionContrato,
            expContrato,
            remuContrato,
            jubiContrato,
            numHijosContrato
        );

        if (actualizado) {
            JOptionPane.showMessageDialog(this, "Contrato actualizado exitosamente.");
            dispose();
            HU02 objetoFormulario = new HU02();
            objetoFormulario.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar el contrato.");
        }

    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, 
            "Error en el formato de fecha: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    }//GEN-LAST:event_btnguardarActionPerformed

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed

      int confirmacion = JOptionPane.showConfirmDialog(this,
        "¿Está seguro que desea finalizar este contrato?",
        "Confirmar Finalización",
        JOptionPane.YES_NO_OPTION);
        
    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            boolean finalizado = contratoDAO.finalizarContrato(id);
            if (finalizado) {
                JOptionPane.showMessageDialog(this, 
                    "Contrato finalizado exitosamente",
                    "Éxito",
                    JOptionPane.INFORMATION_MESSAGE);
                    
                HU02 objetoFormulario = new HU02();
                objetoFormulario.setVisible(true);
                dispose();
            } else {
                JOptionPane.showMessageDialog(this,
                    "Error al finalizar el contrato",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void cb_puestosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cb_puestosKeyReleased
        // TODO add your handling code here:
    if (minimumRemuneration > 0) {
        String remuneracionText = txt_remuneracion.getText().trim();
        try {
            int remuActual = remuneracionText.isEmpty() ? 0 : Integer.parseInt(remuneracionText);
            if (remuActual < minimumRemuneration) {
                lblRemuneracionMinima.setText("* Remuneración mínima: S/." + minimumRemuneration);
                txt_remuneracion.setBackground(new java.awt.Color(255, 220, 220));
            } else {
                lblRemuneracionMinima.setText("");
                txt_remuneracion.setBackground(java.awt.Color.WHITE);
            }
        } catch (NumberFormatException e) {
            lblRemuneracionMinima.setText("* Ingrese un monto válido");
            txt_remuneracion.setBackground(new java.awt.Color(255, 220, 220));
        }
    }
    }//GEN-LAST:event_cb_puestosKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                
                //new EditarContrato().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btn_regresar;
    private javax.swing.JButton btnguardar;
    private javax.swing.JComboBox<String> cb_duracion;
    private javax.swing.JComboBox<String> cb_jubilacion;
    private javax.swing.JComboBox<ComboBoxItem> cb_puestos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txt_expiracion;
    private javax.swing.JTextField txt_hijos;
    private javax.swing.JTextField txt_remuneracion;
    // End of variables declaration//GEN-END:variables
}
